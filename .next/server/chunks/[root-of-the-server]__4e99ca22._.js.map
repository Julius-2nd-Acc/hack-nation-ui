{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/server/trpc.ts"],"sourcesContent":["import { initTRPC } from '@trpc/server'\r\n\r\nconst t = initTRPC.create()\r\n\r\nexport const router = t.router\r\nexport const publicProcedure = t.procedure"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,IAAI,mKAAA,CAAA,WAAQ,CAAC,MAAM;AAElB,MAAM,SAAS,EAAE,MAAM;AACvB,MAAM,kBAAkB,EAAE,SAAS","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/server/routers/python.ts"],"sourcesContent":["// Zod schema for a chat message (matches backend structure)\r\nconst ChatMessageSchema = z.object({\r\n    message_id: z.string(),\r\n    role: z.string(),\r\n    content: z.string(),\r\n    status: z.string().nullable().optional(),\r\n    created_at: z.string().nullable().optional(),\r\n    completed_at: z.string().nullable().optional(),\r\n});\r\n\r\n// Zod schema for chat history response\r\nconst ChatHistoryResponseSchema = z.object({\r\n    session: z.object({\r\n        session_id: z.string(),\r\n        created_at: z.string(),\r\n        updated_at: z.string(),\r\n    }),\r\n    messages: z.array(ChatMessageSchema),\r\n});\r\nimport { router, publicProcedure } from '../trpc';\r\nimport { z } from 'zod';\r\n\r\nconst TRACE_API_URL = process.env.TRACE_API_URL;\r\n\r\n// SessionResponse types\r\n// New session schema for /sessions/<session_id>\r\nconst sessionInfoSchema = z.object({\r\n    session_id: z.string().optional().nullable(),\r\n    created_at: z.string().optional().nullable(),\r\n    updated_at: z.string().optional().nullable(),\r\n});\r\n\r\nconst messageInfoSchema = z.object({\r\n    message_id: z.string(),\r\n    role: z.string(),\r\n    content: z.string(),\r\n    status: z.string(),\r\n    created_at: z.string(),\r\n    completed_at: z.string(),\r\n    // Allow these fields to be optional for compatibility with backend\r\n    event: z.string().optional(),\r\n    session_id: z.string().optional(),\r\n    ts: z.number().optional(),\r\n});\r\n\r\n\r\nconst traceSchema = z.object({\r\n    event: z.string().optional().nullable(),\r\n    inputs: z.unknown().optional().nullable(),\r\n    name: z.array(z.string()).optional().nullable(),\r\n    session_id: z.string().optional().nullable(),\r\n    ts: z.number().optional().nullable(),\r\n    params: z.unknown().optional().nullable(),\r\n    prompts: z.unknown().optional().nullable(),\r\n    output: z.unknown().optional().nullable(),\r\n    input: z.unknown().optional().nullable(),\r\n    tool: z.string().optional().nullable(),\r\n    outputs: z.unknown().optional().nullable(),\r\n});\r\n\r\n\r\n\r\n// Chat endpoint response type\r\nconst chatResponseSchema = z.object({\r\n    message_id: z.string(),\r\n    session_id: z.string(),\r\n});\r\n// Message and traces schema for chainToFlow\r\nconst messageSchema = z.object({\r\n    completed_at: z.string().nullable(),\r\n    content: z.string(),\r\n    created_at: z.string(),\r\n    message_id: z.string(),\r\n    role: z.string(),\r\n    session_id: z.string(),\r\n    status: z.string(),\r\n});\r\n\r\nconst chainToFlowResponseSchema = z.object({\r\n    message: messageSchema,\r\n    traces: z.array(traceSchema),\r\n});\r\n\r\nconst SessionToFlowResponseSchema = z.object({\r\n    session: z.unknown(),\r\n    traces: z.array(traceSchema),\r\n});\r\n\r\n\r\nexport const pythonRouter = router({\r\n    traceToFlow: publicProcedure\r\n        .input(z.object({ session_id: z.string() }))\r\n        .query(async ({ input }) => {\r\n            if (!TRACE_API_URL) {\r\n                console.error('TRACE_API_URL is not set in environment variables');\r\n                throw new Error('TRACE_API_URL is not set in environment variables');\r\n            }\r\n            const url = `${TRACE_API_URL}/sessions/${input.session_id}/traces`;\r\n            console.log('[traceToFlow] Fetching:', url);\r\n            const res = await fetch(url);\r\n            if (!res.ok) {\r\n                console.error('[traceToFlow] Failed to fetch session:', res.status, res.statusText);\r\n                throw new Error('Failed to fetch session');\r\n            }\r\n            const data = await res.json();\r\n            console.log('[traceToFlow] Response:', data);\r\n            // Validate and return as session/messages response\r\n            return SessionToFlowResponseSchema.parse(data);\r\n        }),\r\n    \r\n    chatHistory: publicProcedure\r\n        .input(z.object({ session_id: z.string() }))\r\n        .query(async ({ input }) => {\r\n            const url = `${process.env.TRACE_API_URL || ''}/sessions/${input.session_id}`;\r\n            const res = await fetch(url);\r\n            if (!res.ok) {\r\n                throw new Error(`Failed to fetch chat history: ${res.status} ${res.statusText}`);\r\n            }\r\n            const data = await res.json();\r\n            return ChatHistoryResponseSchema.parse(data);\r\n        }),\r\n\r\n    chainToFlow: publicProcedure\r\n        .input(z.object({ message_id: z.string() }))\r\n        .query(async ({ input }) => {\r\n            console.log('[chainToFlow] Endpoint HIT with message_id:', input.message_id);\r\n            if (!TRACE_API_URL) {\r\n                console.error('TRACE_API_URL is not set in environment variables');\r\n                throw new Error('TRACE_API_URL is not set in environment variables');\r\n            }\r\n            const url = `${TRACE_API_URL}/messages/${input.message_id}/traces`;\r\n            console.log('[chainToFlow] Fetching:', url);\r\n            const res = await fetch(url, { method: 'GET' });\r\n            if (!res.ok) {\r\n                console.error('[chainToFlow] Failed to fetch message traces:', res.status, res.statusText);\r\n                throw new Error('Failed to fetch message traces');\r\n            }\r\n            const data = await res.json();\r\n            console.log('[chainToFlow] Response:', data);\r\n            // Validate and return as chainToFlow response\r\n            return chainToFlowResponseSchema.parse(data);\r\n        }),\r\n\r\n    chatNew: publicProcedure\r\n        .input(z.object({\r\n            prompt: z.string(),\r\n            messages: z.string(),\r\n            session_id: z.string().optional(),\r\n        }))\r\n        .mutation(async ({ input }) => {\r\n            if (!TRACE_API_URL) {\r\n                console.error('TRACE_API_URL is not set in environment variables');\r\n                throw new Error('TRACE_API_URL is not set in environment variables');\r\n            }\r\n            const url = `${TRACE_API_URL}/chat/new`;\r\n            const body: Record<string, any> = {\r\n                prompt: input.prompt,\r\n            };\r\n            if (input.session_id) {\r\n                body.session_id = input.session_id;\r\n            }\r\n            console.log('[chatNew] POST:', url, 'Body:', body);\r\n            const res = await fetch(url, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(body),\r\n            });\r\n            if (!res.ok) {\r\n                console.error('[chatNew] Failed to create chat session:', res.status, res.statusText);\r\n                throw new Error('Failed to create chat session');\r\n            }\r\n            const data = await res.json();\r\n            console.log('[chatNew] Response:', data);\r\n            // Validate and return only message_id and session_id\r\n            const { message_id, session_id } = chatResponseSchema.parse(data);\r\n            return { message_id, session_id };\r\n        }),\r\n});\r\n\r\nexport type PythonRouter = typeof pythonRouter;"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nconst globalForPrisma = global as unknown as { prisma: typeof prisma }\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\nexport default prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,MAAM;AAEN,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 268, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/server/routers/posts.ts"],"sourcesContent":["import z from 'zod'\r\nimport { publicProcedure, router } from '../trpc'\r\nimport  prisma  from '@/lib/prisma'\r\n\r\nconst postSchema = z.object({\r\n  title: z.string(),\r\n  content: z.string(),\r\n  authorId: z.string(),\r\n})\r\n\r\nexport const postRouter = router({\r\n\r\n    getPost: publicProcedure.input(z.object({ id: z.string() })).query(async ({ input }) => {\r\n    return await prisma.post.findUnique({\r\n      where: { id: parseInt(input.id) },\r\n    })\r\n  }),\r\n\r\n  getPosts: publicProcedure.query(async () => {\r\n    return await prisma.post.findMany()\r\n  }),\r\n   createPosts: publicProcedure.input(postSchema).mutation(async ({ input }) => {\r\n    return await prisma.post.create({\r\n      data: {\r\n        title: input.title,\r\n        content: input.content,\r\n        authorId: input.authorId,\r\n      },\r\n    })\r\n  }),\r\n})\r\n\r\nexport type PostRouter = typeof postRouter"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,aAAa,8IAAA,CAAA,UAAC,CAAC,MAAM,CAAC;IAC1B,OAAO,8IAAA,CAAA,UAAC,CAAC,MAAM;IACf,SAAS,8IAAA,CAAA,UAAC,CAAC,MAAM;IACjB,UAAU,8IAAA,CAAA,UAAC,CAAC,MAAM;AACpB;AAEO,MAAM,aAAa,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE;IAE7B,SAAS,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,8IAAA,CAAA,UAAC,CAAC,MAAM,CAAC;QAAE,IAAI,8IAAA,CAAA,UAAC,CAAC,MAAM;IAAG,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE;QACnF,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,OAAO;gBAAE,IAAI,SAAS,MAAM,EAAE;YAAE;QAClC;IACF;IAEA,UAAU,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC;QAC9B,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ;IACnC;IACC,aAAa,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,YAAY,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACvE,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,MAAM;gBACJ,OAAO,MAAM,KAAK;gBAClB,SAAS,MAAM,OAAO;gBACtB,UAAU,MAAM,QAAQ;YAC1B;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 309, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/server/trpc/router.ts"],"sourcesContent":["import { router as createRouter } from '../../app/server/trpc';\r\nimport { pythonRouter } from '../../app/server/routers/python';\r\nimport { postRouter } from '@/app/server/routers/posts';\r\n\r\nexport const appRouter = createRouter({\r\n\tpython: pythonRouter,\r\n\tpost: postRouter\r\n});\r\n\r\nexport type AppRouter = typeof appRouter;\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,YAAY,CAAA,GAAA,uHAAA,CAAA,SAAY,AAAD,EAAE;IACrC,QAAQ,oIAAA,CAAA,eAAY;IACpB,MAAM,mIAAA,CAAA,aAAU;AACjB","debugId":null}},
    {"offset": {"line": 326, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from '@trpc/server/adapters/fetch'\r\n\r\nimport { appRouter } from '@/server/trpc/router'\r\n\r\nconst handler = (req: Request) =>\r\n  fetchRequestHandler({\r\n    endpoint: '/api/trpc',\r\n    req,\r\n    router: appRouter,\r\n    createContext: () => ({}),\r\n  })\r\n\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,0HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,CAAC,CAAC,CAAC;IAC1B","debugId":null}}]
}