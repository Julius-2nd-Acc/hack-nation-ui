{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/server/trpc.ts"],"sourcesContent":["import { initTRPC } from '@trpc/server'\r\n\r\nconst t = initTRPC.create()\r\n\r\nexport const router = t.router\r\nexport const publicProcedure = t.procedure"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,IAAI,mKAAA,CAAA,WAAQ,CAAC,MAAM;AAElB,MAAM,SAAS,EAAE,MAAM;AACvB,MAAM,kBAAkB,EAAE,SAAS","debugId":null}},
    {"offset": {"line": 71, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/server/routers/python.ts"],"sourcesContent":["import { router, publicProcedure } from '../trpc';\r\nimport { z } from 'zod';\r\n\r\nconst TRACE_API_URL = process.env.TRACE_API_URL;\r\n\r\n// SessionResponse types\r\nconst sessionSchema = z.object({\r\n    completed_at: z.string(),\r\n    created_at: z.string(),\r\n    final_output: z.string(),\r\n    initial_prompt: z.string(),\r\n    session_id: z.string(),\r\n    status: z.string(),\r\n});\r\n\r\nconst traceSchema = z.object({\r\n    event: z.string(),\r\n    inputs: z.object({ input: z.string() }).optional(),\r\n    name: z.array(z.string()).optional(),\r\n    session_id: z.string(),\r\n    ts: z.number(),\r\n    params: z.object({\r\n        _type: z.string(),\r\n        model: z.string(),\r\n        model_name: z.string(),\r\n        n: z.number(),\r\n        stop: z.array(z.string()),\r\n        stream: z.boolean(),\r\n        temperature: z.number(),\r\n    }).optional(),\r\n    prompts: z.array(z.string()).optional(),\r\n    output: z.string().optional(),\r\n    input: z.string().optional(),\r\n    tool: z.string().optional(),\r\n    outputs: z.object({ output: z.string() }).optional(),\r\n});\r\n\r\nconst sessionResponseSchema = z.object({\r\n    session: sessionSchema,\r\n    traces: z.array(traceSchema),\r\n});\r\n\r\nexport const pythonRouter = router({\r\n    traceToFlow: publicProcedure\r\n        .input(z.object())\r\n        .query(async () => {\r\n            if (!TRACE_API_URL) {\r\n                throw new Error('TRACE_API_URL is not set in environment variables');\r\n            }\r\n            const url = `${TRACE_API_URL}`;\r\n            const res = await fetch(url);\r\n            if (!res.ok) {\r\n                throw new Error('Failed to fetch trace');\r\n            }\r\n            const trace = await res.json();\r\n            // Validate and return as SessionResponse\r\n            return sessionResponseSchema.parse(trace);\r\n        }),\r\n});\r\n\r\nexport type PythonRouter = typeof pythonRouter;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,gBAAgB,QAAQ,GAAG,CAAC,aAAa;AAE/C,wBAAwB;AACxB,MAAM,gBAAgB,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC3B,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM;IACtB,YAAY,+KAAA,CAAA,IAAC,CAAC,MAAM;IACpB,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM;IACtB,gBAAgB,+KAAA,CAAA,IAAC,CAAC,MAAM;IACxB,YAAY,+KAAA,CAAA,IAAC,CAAC,MAAM;IACpB,QAAQ,+KAAA,CAAA,IAAC,CAAC,MAAM;AACpB;AAEA,MAAM,cAAc,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzB,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM;IACf,QAAQ,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM;IAAG,GAAG,QAAQ;IAChD,MAAM,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC,+KAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ;IAClC,YAAY,+KAAA,CAAA,IAAC,CAAC,MAAM;IACpB,IAAI,+KAAA,CAAA,IAAC,CAAC,MAAM;IACZ,QAAQ,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACb,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM;QACf,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM;QACf,YAAY,+KAAA,CAAA,IAAC,CAAC,MAAM;QACpB,GAAG,+KAAA,CAAA,IAAC,CAAC,MAAM;QACX,MAAM,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC,+KAAA,CAAA,IAAC,CAAC,MAAM;QACtB,QAAQ,+KAAA,CAAA,IAAC,CAAC,OAAO;QACjB,aAAa,+KAAA,CAAA,IAAC,CAAC,MAAM;IACzB,GAAG,QAAQ;IACX,SAAS,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC,+KAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ;IACrC,QAAQ,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,OAAO,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,MAAM,+KAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACzB,SAAS,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QAAE,QAAQ,+KAAA,CAAA,IAAC,CAAC,MAAM;IAAG,GAAG,QAAQ;AACtD;AAEA,MAAM,wBAAwB,+KAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnC,SAAS;IACT,QAAQ,+KAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACpB;AAEO,MAAM,eAAe,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE;IAC/B,aAAa,uHAAA,CAAA,kBAAe,CACvB,KAAK,CAAC,+KAAA,CAAA,IAAC,CAAC,MAAM,IACd,KAAK,CAAC;QACH,IAAI,CAAC,eAAe;YAChB,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,MAAM,GAAG,eAAe;QAC9B,MAAM,MAAM,MAAM,MAAM;QACxB,IAAI,CAAC,IAAI,EAAE,EAAE;YACT,MAAM,IAAI,MAAM;QACpB;QACA,MAAM,QAAQ,MAAM,IAAI,IAAI;QAC5B,yCAAyC;QACzC,OAAO,sBAAsB,KAAK,CAAC;IACvC;AACR","debugId":null}},
    {"offset": {"line": 144, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nconst globalForPrisma = global as unknown as { prisma: typeof prisma }\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\nexport default prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,MAAM;AAEN,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 157, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/server/routers/posts.ts"],"sourcesContent":["import z from 'zod'\r\nimport { publicProcedure, router } from '../trpc'\r\nimport  prisma  from '@/lib/prisma'\r\n\r\nconst postSchema = z.object({\r\n  title: z.string(),\r\n  content: z.string(),\r\n  authorId: z.string(),\r\n})\r\n\r\nexport const postRouter = router({\r\n\r\n    getPost: publicProcedure.input(z.object({ id: z.string() })).query(async ({ input }) => {\r\n    return await prisma.post.findUnique({\r\n      where: { id: parseInt(input.id) },\r\n    })\r\n  }),\r\n\r\n  getPosts: publicProcedure.query(async () => {\r\n    return await prisma.post.findMany()\r\n  }),\r\n   createPosts: publicProcedure.input(postSchema).mutation(async ({ input }) => {\r\n    return await prisma.post.create({\r\n      data: {\r\n        title: input.title,\r\n        content: input.content,\r\n        authorId: input.authorId,\r\n      },\r\n    })\r\n  }),\r\n})\r\n\r\nexport type PostRouter = typeof postRouter"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,aAAa,8IAAA,CAAA,UAAC,CAAC,MAAM,CAAC;IAC1B,OAAO,8IAAA,CAAA,UAAC,CAAC,MAAM;IACf,SAAS,8IAAA,CAAA,UAAC,CAAC,MAAM;IACjB,UAAU,8IAAA,CAAA,UAAC,CAAC,MAAM;AACpB;AAEO,MAAM,aAAa,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE;IAE7B,SAAS,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,8IAAA,CAAA,UAAC,CAAC,MAAM,CAAC;QAAE,IAAI,8IAAA,CAAA,UAAC,CAAC,MAAM;IAAG,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE;QACnF,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,OAAO;gBAAE,IAAI,SAAS,MAAM,EAAE;YAAE;QAClC;IACF;IAEA,UAAU,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC;QAC9B,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ;IACnC;IACC,aAAa,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,YAAY,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACvE,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,MAAM;gBACJ,OAAO,MAAM,KAAK;gBAClB,SAAS,MAAM,OAAO;gBACtB,UAAU,MAAM,QAAQ;YAC1B;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 198, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/server/trpc/router.ts"],"sourcesContent":["import { router as createRouter } from '../../app/server/trpc';\r\nimport { pythonRouter } from '../../app/server/routers/python';\r\nimport { postRouter } from '@/app/server/routers/posts';\r\n\r\nexport const appRouter = createRouter({\r\n\tpython: pythonRouter,\r\n\tpost: postRouter\r\n});\r\n\r\nexport type AppRouter = typeof appRouter;\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEO,MAAM,YAAY,CAAA,GAAA,uHAAA,CAAA,SAAY,AAAD,EAAE;IACrC,QAAQ,oIAAA,CAAA,eAAY;IACpB,MAAM,mIAAA,CAAA,aAAU;AACjB","debugId":null}},
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/GitHub/hack-nation-ui/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from '@trpc/server/adapters/fetch'\r\n\r\nimport { appRouter } from '@/server/trpc/router'\r\n\r\nconst handler = (req: Request) =>\r\n  fetchRequestHandler({\r\n    endpoint: '/api/trpc',\r\n    req,\r\n    router: appRouter,\r\n    createContext: () => ({}),\r\n  })\r\n\r\nexport { handler as GET, handler as POST }"],"names":[],"mappings":";;;;AAAA;AAEA;;;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,yKAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,0HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,CAAC,CAAC,CAAC;IAC1B","debugId":null}}]
}