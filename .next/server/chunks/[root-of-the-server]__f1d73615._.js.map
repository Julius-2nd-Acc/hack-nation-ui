{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 58, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/MIT%20SLOAN/hackathon-ui/app/server/trpc.ts"],"sourcesContent":["import { initTRPC } from '@trpc/server'\r\n\r\nconst t = initTRPC.create()\r\n\r\nexport const router = t.router\r\nexport const publicProcedure = t.procedure"],"names":[],"mappings":";;;;AAAA;;AAEA,MAAM,IAAI,mKAAA,CAAA,WAAQ,CAAC,MAAM;AAElB,MAAM,SAAS,EAAE,MAAM;AACvB,MAAM,kBAAkB,EAAE,SAAS","debugId":null}},
    {"offset": {"line": 79, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/MIT%20SLOAN/hackathon-ui/lib/prisma.ts"],"sourcesContent":["import { PrismaClient } from '@prisma/client'\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nconst globalForPrisma = global as unknown as { prisma: typeof prisma }\r\n\r\nif (process.env.NODE_ENV !== 'production') globalForPrisma.prisma = prisma\r\n\r\nexport default prisma"],"names":[],"mappings":";;;AAAA;;AAEA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAE/B,MAAM;AAEN,wCAA2C,gBAAgB,MAAM,GAAG;uCAErD","debugId":null}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/MIT%20SLOAN/hackathon-ui/app/server/routers/posts.ts"],"sourcesContent":["import z from 'zod'\r\nimport { publicProcedure, router } from '../trpc'\r\nimport  prisma  from '@/lib/prisma'\r\n\r\nconst postSchema = z.object({\r\n  title: z.string(),\r\n  content: z.string(),\r\n  authorId: z.string(),\r\n})\r\n\r\nexport const postRouter = router({\r\n\r\n    getPost: publicProcedure.input(z.object({ id: z.string() })).query(async ({ input }) => {\r\n    return await prisma.post.findUnique({\r\n      where: { id: parseInt(input.id) },\r\n    })\r\n  }),\r\n\r\n  getPosts: publicProcedure.query(async () => {\r\n    return await prisma.post.findMany()\r\n  }),\r\n   createPosts: publicProcedure.input(postSchema).mutation(async ({ input }) => {\r\n    return await prisma.post.create({\r\n      data: {\r\n        title: input.title,\r\n        content: input.content,\r\n        authorId: input.authorId,\r\n      },\r\n    })\r\n  }),\r\n})\r\n\r\nexport type PostRouter = typeof postRouter"],"names":[],"mappings":";;;AAAA;AACA;AACA;;;;AAEA,MAAM,aAAa,8IAAA,CAAA,UAAC,CAAC,MAAM,CAAC;IAC1B,OAAO,8IAAA,CAAA,UAAC,CAAC,MAAM;IACf,SAAS,8IAAA,CAAA,UAAC,CAAC,MAAM;IACjB,UAAU,8IAAA,CAAA,UAAC,CAAC,MAAM;AACpB;AAEO,MAAM,aAAa,CAAA,GAAA,uHAAA,CAAA,SAAM,AAAD,EAAE;IAE7B,SAAS,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,8IAAA,CAAA,UAAC,CAAC,MAAM,CAAC;QAAE,IAAI,8IAAA,CAAA,UAAC,CAAC,MAAM;IAAG,IAAI,KAAK,CAAC,OAAO,EAAE,KAAK,EAAE;QACnF,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YAClC,OAAO;gBAAE,IAAI,SAAS,MAAM,EAAE;YAAE;QAClC;IACF;IAEA,UAAU,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC;QAC9B,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,QAAQ;IACnC;IACC,aAAa,uHAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,YAAY,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACvE,OAAO,MAAM,+GAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAC9B,MAAM;gBACJ,OAAO,MAAM,KAAK;gBAClB,SAAS,MAAM,OAAO;gBACtB,UAAU,MAAM,QAAQ;YAC1B;QACF;IACF;AACF","debugId":null}},
    {"offset": {"line": 133, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/jplk2/Documents/MIT%20SLOAN/hackathon-ui/app/server/routers/python.ts"],"sourcesContent":["import { router, publicProcedure } from '../trpc';\r\nimport { z } from 'zod';\r\n\r\nconst API_BASE = \"http://127.0.0.1:8000\";\r\n\r\nconst messageSchema = z.object({\r\n    role: z.string(), // 'user' or 'ai'\r\n    content: z.string(),\r\n});\r\n\r\nconst chatRequestSchema = z.object({\r\n    history: z.array(messageSchema),\r\n    message: z.string(),\r\n});\r\n\r\nconst chatResponseSchema = z.object({\r\n    response: z.string(),\r\n    history: z.array(messageSchema),\r\n});\r\n\r\nexport const pythonRouter = router({\r\n    health: publicProcedure.query(async () => {\r\n        const url = `${API_BASE}/health`;\r\n        console.log('[pythonRouter] GET', url);\r\n        const res = await fetch(url);\r\n        console.log('[pythonRouter] Response status:', res.status);\r\n        if (!res.ok) {\r\n            const text = await res.text().catch(() => '');\r\n            console.error('[pythonRouter] Error body:', text);\r\n            throw new Error('Python API health check failed');\r\n        }\r\n        return res.json();\r\n    }),\r\n\r\n    chat: publicProcedure\r\n        .input(chatRequestSchema)\r\n        .mutation(async ({ input }) => {\r\n            const url = `${API_BASE}/chat`;\r\n            console.log('[pythonRouter] POST', url, input);\r\n            const res = await fetch(url, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(input),\r\n            });\r\n            console.log('[pythonRouter] Response status:', res.status);\r\n            if (!res.ok) {\r\n                const text = await res.text().catch(() => '');\r\n                console.error('[pythonRouter] Error body:', text);\r\n                throw new Error('Python API /chat failed');\r\n            }\r\n            return chatResponseSchema.parse(await res.json());\r\n        }),\r\n\r\n    talkStream: publicProcedure\r\n        .input(chatRequestSchema)\r\n        .mutation(async ({ input }) => {\r\n            const url = `${API_BASE}/talk/stream`;\r\n            console.log('[pythonRouter] POST', url, input);\r\n            const res = await fetch(url, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(input),\r\n            });\r\n            console.log('[pythonRouter] Response status:', res.status);\r\n            if (!res.ok) {\r\n                const text = await res.text().catch(() => '');\r\n                console.error('[pythonRouter] Error body:', text);\r\n                throw new Error('Python API /talk/stream failed');\r\n            }\r\n            const blob = await res.blob();\r\n            return { audioUrl: URL.createObjectURL(blob) };\r\n        }),\r\n\r\n    talkFile: publicProcedure\r\n        .input(chatRequestSchema)\r\n        .mutation(async ({ input }) => {\r\n            const url = `${API_BASE}/talk/file`;\r\n            console.log('[pythonRouter] POST', url, input);\r\n            const res = await fetch(url, {\r\n                method: 'POST',\r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify(input),\r\n            });\r\n            console.log('[pythonRouter] Response status:', res.status);\r\n            if (!res.ok) {\r\n                const text = await res.text().catch(() => '');\r\n                console.error('[pythonRouter] Error body:', text);\r\n                throw new Error('Python API /talk/file failed');\r\n            }\r\n            const blob = await res.blob();\r\n            return { audioUrl: URL.createObjectURL(blob) };\r\n        }),\r\n});\r\n\r\nexport type PythonRouter = typeof pythonRouter;"],"names":[],"mappings":"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","debugId":null}}]
}